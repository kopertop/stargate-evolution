<context>
# Overview  
Stargate Evolution is a top-down, turn-based survival game set in the Stargate Universe. The player takes control of a single character who emerges through the Stargate onto the Ancient ship Destiny. The game combines exploration, resource management, character interaction, and strategic combat in a dynamic, extensible environment that follows the Stargate Universe storyline.

The game serves both casual players seeking an engaging survival experience and Stargate fans wanting to immerse themselves in the universe. It solves the problem of limited interactive Stargate content while providing a rich, evolving gameplay experience that can grow over time with new content, levels, rooms, and technologies.

# Core Features  
## Single Character Survival System
- Player controls one character throughout the entire game experience
- Character progression through skills, knowledge, and relationships
- Real-time survival mechanics (hunger, thirst, fatigue, health)
- Automatic cloud saving with user ID integration via Cloudflare Workers
- Offline play capability when game data is locally cached

## Dynamic Ship Exploration
- Procedurally unlockable rooms and corridors on the Destiny
- Each room has unique purposes, resources, and challenges
- Environmental storytelling through room states and discovered logs
- Progressive ship repair and activation systems
- Hidden areas unlocked through story progression or technology discovery

## Turn-Based Combat System
- D&D-style combat mechanics with dice rolls and modifiers
- No "pew pew" shooter mechanics - strategic, thoughtful combat
- Combat against various threats: ship malfunctions, alien creatures, environmental hazards
- Multiple combat resolution paths (negotiation, stealth, direct confrontation)
- Consequences that affect future encounters and story branches

## NPC Interaction & Relationship System
- Key Stargate Universe characters as NPCs (Dr. Rush, Colonel Young, Eli Wallace, etc.)
- Dynamic relationship system affecting story outcomes and available actions
- Dialogue trees with meaningful choices impacting character development
- NPC-driven quests and storylines that advance the main narrative
- Character-specific expertise areas (medical, technical, military, scientific)

## Resource Management & Crafting
- Scavenging system for parts, food, water, and energy cells
- Crafting system for tools, weapons, and ship components
- Resource allocation decisions affecting ship systems and crew survival
- Trade-offs between immediate needs and long-term ship improvement
- Limited inventory encouraging strategic decision-making

## Extensible Technology Tree
- Research system unlocking new areas, abilities, and story content
- Ancient technology discovery and activation
- Progressive understanding of Destiny's systems and capabilities
- Technology-gated content ensuring replay value and progression
- Community-expandable tech tree for future content updates

## Cross-Platform Controller Support
- Primary input via game controller for console-like experience
- Keyboard and mouse support for accessibility and preference
- Touch controls optimized for mobile devices (future iOS/Android)
- Consistent control schemes across all platforms
- Customizable control mapping and accessibility options

# User Experience  
## Primary User Persona: "The Stargate Explorer"
- Age: 25-45, familiar with Stargate Universe or sci-fi survival games
- Wants: Immersive story experience with meaningful choices and progression
- Expects: Quality storytelling, fair but challenging gameplay, regular content updates
- Plays: 1-3 hour sessions, values progress persistence and meaningful advancement

## Secondary User Persona: "The Casual Survivor"
- Age: 18-35, enjoys survival games but may not know Stargate lore
- Wants: Engaging gameplay loop with clear objectives and satisfying progression
- Expects: Intuitive controls, helpful tutorials, ability to learn lore through gameplay
- Plays: 30-90 minute sessions, values quick engagement and clear objectives

## Key User Flows
### Initial Experience Flow
1. Opening cinematic: Player emerges from Stargate onto Destiny
2. Tutorial: Basic movement, interaction, and survival mechanics
3. First NPC encounter: Meet key character, establish story context
4. First survival challenge: Find water/food, understand resource constraints
5. First exploration: Unlock adjacent room, discover ship's state

### Core Gameplay Loop
1. Explore available rooms and gather resources
2. Interact with NPCs to advance storylines and gain information
3. Make strategic decisions about resource allocation and ship repairs
4. Face challenges (environmental, technical, or combat)
5. Progress character skills and unlock new areas/technologies
6. Save progress automatically to cloud

### Combat Encounter Flow
1. Encounter threat with multiple approach options
2. Enter turn-based mode with clear action options
3. Execute strategic decisions with visible outcomes
4. Resolve encounter with consequences affecting future gameplay
5. Return to exploration mode with updated world state

## UI/UX Considerations
- Clean, minimalist HUD not obscuring the game world
- Context-sensitive interaction prompts
- Clear resource indicators and character status
- Intuitive inventory management system
- Accessible color schemes and text sizing options
- Consistent iconography throughout the experience
</context>
<PRD>
# Technical Architecture  
## System Components
### Frontend (React + Vite)
- React-based UI with TypeScript for type safety
- Real-time game state management using React Context
- Canvas-based 2D rendering for game world visualization
- Responsive design supporting multiple screen sizes and orientations
- PWA capabilities for offline play and mobile app-like experience

### Backend (Cloudflare Workers + D1)
- Serverless API using Cloudflare Workers for global edge deployment
- D1 SQLite database for game state, user progress, and content management
- RESTful API design with OpenAPI documentation
- JWT-based authentication integrated with Google OAuth
- Rate limiting and security measures for API endpoints

### Common Package
- Shared TypeScript types and data models between frontend/backend
- Zod schemas for runtime validation and type safety
- Utility functions for game logic calculations
- Consistent data transformation and validation across tiers

### Admin System
- Separate admin interface for content creators and game masters
- Room designer for creating new ship layouts and room configurations
- Template management for NPCs, items, technologies, and story elements
- Content pipeline for adding new storylines, characters, and areas
- Version control integration for content management

## Data Models
### Core Game Entities
- **User**: Authentication, preferences, progress tracking
- **GameSession**: Current game state, save data, timestamps
- **Character**: Player stats, skills, inventory, relationships
- **Room**: Layout, contents, state, unlock conditions
- **NPC**: Character data, dialogue trees, relationship status
- **Item**: Properties, crafting recipes, usage conditions
- **Technology**: Research trees, unlock requirements, effects

### Template System
- **RoomTemplate**: Reusable room designs with configurable content
- **PersonTemplate**: NPC archetypes with customizable attributes
- **TechnologyTemplate**: Tech tree nodes with dependencies and effects
- **DialogueTemplate**: Reusable conversation patterns and branching logic

## APIs and Integrations
### Game API Endpoints
- `/api/auth/*` - User authentication and session management
- `/api/game/*` - Game state CRUD operations
- `/api/character/*` - Character progression and inventory
- `/api/rooms/*` - Room data and exploration mechanics
- `/api/npcs/*` - NPC interactions and relationship management
- `/api/technology/*` - Research and technology tree management

### Admin API Endpoints
- `/api/admin/templates/*` - Content template management
- `/api/admin/rooms/*` - Room builder and layout tools
- `/api/admin/stories/*` - Narrative content and dialogue management
- `/api/admin/analytics/*` - Player behavior and game balance metrics

### External Integrations
- Google OAuth for user authentication
- Cloudflare Analytics for usage metrics
- Future: Steam integration for desktop distribution
- Future: Mobile app store integrations

## Infrastructure Requirements
### Development Environment
- Node.js 18+ with pnpm workspace management
- TypeScript compilation with strict type checking
- ESLint and Prettier for code quality and consistency
- Vitest for unit and integration testing
- Local D1 database for development with migration system

### Production Environment
- Cloudflare Workers for serverless backend deployment
- Cloudflare D1 for production database with automatic backups
- Cloudflare Pages for frontend hosting with global CDN
- Environment-based configuration for staging and production
- Monitoring and alerting for system health and performance

### Performance Requirements
- Sub-100ms API response times for game actions
- Client-side caching for static content and frequently accessed data
- Progressive loading for large game assets and room data
- Offline capability maintaining 90% of core functionality
- Support for 1000+ concurrent players per region

# Development Roadmap  
## Phase 1: Foundation & Core Systems (MVP)
### Authentication & User Management
- Google OAuth integration with user profile management
- Session handling and automatic cloud save synchronization
- Basic user preferences and settings storage
- Account linking and data migration capabilities

### Basic Game Loop Implementation
- Core character movement and interaction system
- Simple room navigation with basic collision detection
- Resource collection and basic inventory management
- Essential NPC dialogue system with linear conversations
- Turn-based combat framework with basic attack/defend mechanics

### Essential Ship Areas
- Starting Stargate room with iconic visual design
- 3-4 connected corridors and essential rooms (quarters, mess hall, medical)
- Basic room state management (locked/unlocked, damaged/repaired)
- Simple environmental storytelling through room descriptions

### Admin Foundation
- Basic admin authentication and role management
- Simple room template editor for creating new areas
- Basic NPC template system for character creation
- Content versioning and deployment pipeline

## Phase 2: Enhanced Gameplay & Content
### Advanced Combat System
- Full D&D-style combat with multiple action types
- Equipment system affecting combat capabilities
- Environmental combat factors and tactical positioning
- Combat consequences affecting story and character relationships

### Expanded Ship Exploration
- 15-20+ unique rooms with specialized functions
- Progressive unlock system tied to story advancement
- Hidden areas discoverable through exploration and puzzle-solving
- Dynamic room states that change based on player actions and story progress

### NPC Relationship System
- Complex relationship tracking with multiple NPCs
- Faction system with competing interests and alliances
- Consequences of relationship choices affecting available storylines
- Character-specific expertise areas influencing gameplay options

### Resource & Crafting Systems
- Comprehensive crafting system for tools, weapons, and ship components
- Resource scarcity requiring strategic allocation decisions
- Multi-step crafting processes requiring different character skills
- Trade-offs between immediate survival needs and long-term advancement

## Phase 3: Deep Narrative & Advanced Features
### Branching Storylines
- Multiple story paths based on player choices and character relationships
- Major decision points with far-reaching consequences
- Character-specific storylines unlocked through relationship development
- Alternative endings based on cumulative player choices

### Advanced Technology System
- Complex research tree with interdependent technologies
- Ancient technology discovery requiring puzzle-solving and exploration
- Technology affecting gameplay mechanics and available actions
- Community-expandable tech tree for ongoing content updates

### Extended Ship Systems
- Ship-wide systems affecting all rooms and NPCs
- Resource allocation affecting ship functionality and crew morale
- Crisis management requiring coordinated responses with NPCs
- Long-term ship improvement projects affecting multiple game systems

### Cross-Platform Features
- Mobile app versions for iOS and Android
- Cross-platform save synchronization and account linking
- Platform-specific UI optimizations while maintaining core experience
- Social features for sharing discoveries and achievements

## Phase 4: Community & Expansion
### Modding & Community Content
- Content creation tools for community-generated rooms and storylines
- Steam Workshop integration for mod distribution and discovery
- Community challenges and events with shared objectives
- Player-generated content integration pipeline

### Advanced Analytics & Personalization
- Player behavior analysis for game balance optimization
- Personalized content recommendations based on play style
- Adaptive difficulty scaling based on player skill and preferences
- A/B testing framework for new features and content

### Multiplayer Foundation
- Shared universe elements with persistent world changes
- Asynchronous multiplayer features (message systems, shared discoveries)
- Cooperative gameplay options for specific scenarios
- Foundation for future real-time multiplayer expansion

# Logical Dependency Chain
## Foundation Layer (Must Be Built First)
1. **Authentication System** - Required for all user data persistence
2. **Database Schema & Migrations** - Foundation for all game data
3. **Common Type System** - Shared models ensuring consistency across tiers
4. **Basic API Framework** - Core endpoints for frontend-backend communication

## Core Gameplay Layer (Build Upon Foundation)
5. **Character System** - Player entity and basic stats management
6. **Room System** - Basic room navigation and state management
7. **Inventory System** - Item storage and basic resource management
8. **Save/Load System** - Game state persistence and restoration

## Interactive Layer (Build Upon Core)
9. **NPC Framework** - Basic character interaction and dialogue
10. **Combat Framework** - Turn-based battle system foundation
11. **Basic UI/UX** - Game interface for player interaction
12. **Admin Panel Basics** - Content creation and management tools

## Content Layer (Build Upon Interactive)
13. **Starting Game Content** - Initial rooms, NPCs, and story elements
14. **Resource & Crafting** - Extended gameplay mechanics
15. **Technology System** - Research and progression mechanics
16. **Advanced Combat Features** - Complex battle mechanics and equipment

## Enhancement Layer (Build Upon Content)
17. **Advanced NPCs & Relationships** - Complex character interactions
18. **Branching Narratives** - Multiple story paths and consequences
19. **Extended Ship Areas** - Additional rooms and exploration content
20. **Cross-Platform Support** - Mobile and desktop optimization

## Future Layer (Build Upon Enhancement)
21. **Modding Tools** - Community content creation capabilities
22. **Advanced Analytics** - Player behavior tracking and optimization
23. **Multiplayer Foundation** - Shared universe and cooperative features
24. **Community Features** - Social elements and content sharing

## Quick Usability Milestones
### First Playable (Weeks 4-6)
- Player can log in, create character, move through 3 rooms
- Basic resource collection and inventory management
- One simple NPC conversation
- Core save/load functionality working

### First Complete Loop (Weeks 8-10)
- Full starting area with 5-6 rooms accessible
- Multiple NPCs with basic relationship tracking
- Simple combat encounter with meaningful consequences
- Basic crafting for essential items

### First Story Arc (Weeks 12-16)
- Complete introductory storyline from Stargate arrival to first major ship system activation
- 10+ unique rooms with environmental storytelling
- 5+ NPCs with distinct personalities and story roles
- Multiple solution paths for key story challenges

# Risks and Mitigations  
## Technical Challenges
### Risk: Cloudflare D1 Database Limitations
- **Impact**: Complex queries or large datasets might hit platform limits
- **Mitigation**: Design simple, efficient schemas; implement client-side caching; plan for potential database migration path
- **Monitoring**: Track query performance and database size growth

### Risk: Real-time Game State Synchronization
- **Impact**: Player actions might conflict with save data or create inconsistent states
- **Mitigation**: Implement optimistic updates with conflict resolution; design atomic operations; use versioning for save data
- **Monitoring**: Track save/load success rates and conflict frequency

### Risk: Cross-Platform Controller Support Complexity
- **Impact**: Different input methods might create inconsistent user experiences
- **Mitigation**: Design universal control abstractions; extensive testing on target platforms; fallback input methods
- **Monitoring**: User feedback on control responsiveness and platform-specific issues

## Product & Scope Challenges
### Risk: Feature Creep and Scope Expansion
- **Impact**: Development timeline extends indefinitely; core features remain unpolished
- **Mitigation**: Strict adherence to MVP definition; regular scope reviews; community feedback prioritization
- **Monitoring**: Track feature completion rates and development velocity

### Risk: Content Creation Bottleneck
- **Impact**: Game content becomes stale; updates slow down significantly
- **Mitigation**: Build robust admin tools early; design reusable content templates; plan for community content creation
- **Monitoring**: Measure content creation efficiency and player engagement with new content

### Risk: Balancing Accessibility vs. Depth
- **Impact**: Game becomes too complex for casual players or too simple for engaged players
- **Mitigation**: Implement progressive complexity; multiple difficulty options; extensive playtesting with diverse audiences
- **Monitoring**: Player retention rates across different engagement levels

## Resource & Business Challenges
### Risk: Ongoing Server and Development Costs
- **Impact**: Monthly costs exceed sustainable levels for indie development
- **Mitigation**: Efficient architecture design; usage-based scaling; plan for potential monetization or cost-sharing
- **Monitoring**: Track monthly operational costs and player count ratios

### Risk: Single Developer Sustainability
- **Impact**: Development becomes unsustainable due to workload or technical complexity
- **Mitigation**: Focus on automation and tooling; build strong community; design systems for maintainability
- **Monitoring**: Development velocity and developer satisfaction/burnout indicators

### Risk: Intellectual Property and Licensing Concerns
- **Impact**: Legal challenges related to Stargate Universe content usage
- **Mitigation**: Research fair use guidelines; focus on original story elements; prepare alternative themes if needed
- **Monitoring**: Stay informed about IP holder policies and community guidelines

## User Adoption Challenges
### Risk: Limited Appeal Outside Stargate Fanbase
- **Impact**: Player base remains too small for sustainable community
- **Mitigation**: Design engaging survival mechanics independent of IP; focus on universal gameplay appeals
- **Monitoring**: Player acquisition sources and retention rates by audience segment

### Risk: Competition from Established Games
- **Impact**: Players choose more polished alternatives over indie project
- **Mitigation**: Focus on unique selling points; rapid iteration based on feedback; strong community engagement
- **Monitoring**: Player feedback on competitive advantages and retention factors

# Appendix  
## Research Findings
### Target Audience Analysis
- Stargate fanbase remains active with 50K+ active community members across platforms
- Turn-based strategy games showing resurgence with titles like Baldur's Gate 3 and XCOM series
- Survival game market continues growing with emphasis on narrative-driven experiences
- Cross-platform play increasingly expected, especially for indie titles

### Technical Feasibility Studies
- Cloudflare Workers can handle real-time game state with sub-100ms response times
- D1 database suitable for game data with current player count projections (1K-10K users)
- React-based games perform well on modern devices with proper optimization
- PWA technology sufficient for mobile experience without native app requirements

### Competitive Landscape
- Limited quality Stargate-themed games currently available
- Turn-based survival games often lack strong narrative elements
- Successful indie games combine accessible gameplay with deep progression systems
- Community-driven content significantly extends game lifespan and engagement

## Technical Specifications
### Minimum System Requirements
- **Web Browser**: Chrome 88+, Firefox 85+, Safari 14+, Edge 88+
- **Mobile**: iOS 14+, Android 8+ with modern browser
- **Controller**: Any standard gamepad with 8+ buttons and dual analog sticks
- **Network**: Intermittent internet for save synchronization (offline play supported)

### Performance Targets
- **Load Time**: Initial game load under 10 seconds on average connection
- **Frame Rate**: Consistent 60 FPS during normal gameplay, 30 FPS minimum during complex scenes
- **Memory Usage**: Under 512MB RAM usage for game client
- **Storage**: Under 100MB local storage for cached game data
- **Battery**: 3+ hours continuous play on mobile devices

### Accessibility Standards
- **Visual**: Support for colorblind users, high contrast modes, scalable UI elements
- **Audio**: Subtitles for all audio content, visual indicators for audio cues
- **Motor**: Full keyboard navigation, customizable controls, reduced precision options
- **Cognitive**: Clear tutorials, difficulty options, progress indicators and help systems

### Security & Privacy
- **Data Protection**: GDPR compliant data handling, minimal data collection
- **Authentication**: Secure OAuth flows, optional anonymous play modes
- **Content Security**: Input validation, XSS protection, secure API endpoints
- **Privacy**: No tracking beyond essential game mechanics, transparent data usage policies
</PRD>