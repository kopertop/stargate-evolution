# Stargate Evolution Development Guidelines

Follow the guide in the `ROADMAP.md` file.

## 1. Repository and Code Structure

* **Mono-repo:** Use pnpm workspaces. Organize code into `/packages/frontend`, `/packages/backend`, and optionally `/packages/common`.
* **TypeScript Everywhere:** All source code must be in `.ts` (or `.tsx` for React UIs, if ever used). Enable `strict` mode in `tsconfig.json`.
* **Shared Types:** All data types shared between front-end and back-end (e.g., `GameState`, `CrewMember`) should be defined in `/packages/common/types.d.ts` and imported where needed.
* **Modules:** Organize logic by feature, not by type. Example: ship systems code stays in `systems/` in front-end, AI code in `ai.ts` or `ai/` in back-end.

## 2. Coding and Style

* **Linting/Formatting:** Always use Prettier and ESLint. Lint and format before each commit (consider Husky hooks).
* **Naming:** Use `camelCase` for variables/functions, `PascalCase` for types/classes, `UPPER_SNAKE_CASE` for constants.
* **Comments:** Write concise, actionable comments only where needed. Document function intentions, parameters, and expected results for all exported functions.

## 3. PixiJS Game Development

* **Rendering:** All rendering in front-end must use PixiJS. Do not mix DOM-based UIs unless strictly necessary (and only in overlay elements).
* **Game Loop:** All game logic and animations should be inside the `Game` class, updated via Pixi's ticker.
* **State Management:** Use plain classes or Zustand (if a state library is needed) to manage front-end game state. Do not use Redux.

## 4. Backend (Cloudflare Workers)

* **APIs:** Expose only `/api/*` endpoints. Never expose internal state structures or keys.
* **Game State:** Use Cloudflare KV for player/game state, and Durable Objects if session coordination is needed.
* **Secrets:** Never commit secrets (API keys, etc). Use Wrangler's `secrets` to configure them for Cloudflare.
* **OpenAI Integration:** All OpenAI or LLM API calls must happen server-side (never expose API keys to the front-end).

## 5. AI/LLM Usage

* **Prompt Engineering:** Always include relevant `system` and `memory` context in AI prompts. Truncate or summarize long history to fit within context window.
* **Personality:** Destiny AI must be persistent, context-aware, and match SGU's tone (dark, survival-focused, with subtle humor).
* **Function Calling:** If using OpenAI function calling, always validate and sanitize AI requests before executing actions in the game.

## 6. Procedural Generation

* **Seeded RNG:** Procedural content (galaxies, planets) must use a seeded random number generator to ensure replayability and reproducibility.
* **Dynamic Content:** Use AI to flavor descriptions, missions, and events, but never as the single source of truth for game state or critical progression.

## 7. UI and UX

* **Accessibility:** All UI elements must be keyboard-navigable. Use clear contrast and readable fonts.
* **Responsiveness:** Game UI should scale to common screen sizes (desktop and tablet at minimum).
* **Dialogs and Feedback:** Always provide feedback for user actions (loading, errors, success).

## 8. Testing and Review

* **Unit Tests:** Add unit tests for all utility modules, procedural generation, and backend API handlers.
* **Manual Playtesting:** Document all major playtest results and bugs in `/docs/playtesting.md`.
* **Code Review:** All merges into main require at least one review (can be automated or human).

## 9. Bones Files

* **Persistence:** Store "bones files" only after game over or abandonment. Never store personal dataâ€”only game world/narrative content.
* **Integration:** When spawning bones events, display a warning if data is missing or malformed.

## 10. Documentation

* **Docs:** Keep `/README.md` and `/docs/` up to date with setup, dev, and deployment guides.
* **In-Code Docs:** Add JSDoc comments for public APIs, key classes, and AI prompt structure.

## 11. Task Completion:

All agents (AI or human) must update `TASKS.md` and check off tasks as they are completed. This is the official project source of truth for development status.

---

**Quick Rules Reference:**

* All code = strict TypeScript, shared via mono-repo
* PixiJS for all rendering
* Procedural generation must be seeded
* AI/LLM logic is always backend
* Never expose secrets
* Unit test critical logic
* Use pnpm for package management
* Use vitest for testing
* Use vite for bundling


## DEBUG MODE

When entering debug mode, you should use the following command to execute tests:

```bash
pnpm test
```

Then analize the results, and fix any issues. After fixing the issues, you should run the tests
again to ensure the issues are fixed.

Continue this process until all tests are passing.


## TypeScript and TSX files

- Use `for...of` syntax over `.forEach`
- Prevent repeating code, search for existing functionality first
- Separate logical components, do not put styles in with display code, or lookup code

